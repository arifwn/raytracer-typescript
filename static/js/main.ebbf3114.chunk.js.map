{"version":3,"sources":["renderer/CanvasDrawer.ts","renderer/RayTracer.ts","renderer/canvasRayTracer.ts","components/RayTracer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CanvasDrawer","canvas","context","this","getContext","width","height","x","y","color","prevColor","fillStyle","fillRect","fill","defaultColors","white","black","sky","highlight","RayTracer","drawer","colors","camera","z","rx","ry","rz","fov","Math","PI","tileWidth","floorWidth","maxRenderDistance","pillars","position","spheres","radius","draw","renderDimension","dimension","cameraFOV","cameraOriginPos","Array","from","keys","forEach","ypos","window","setTimeout","xpos","at","rayPixel","amount","usePound","slice","colorNum","parseInt","r","b","g","toString","origin","direction","shoot","i","length","pillar","pillarNormalizedPosition","pillarRzMin","atan","pillarRzMax","pillarRxMin","pillarRxMax","pillarPlaneLength","cos","newOrigin","tan","newDirection","hitPoint","rayDistance","lightenColor","Infinity","rayDistanceAbs","isNaN","abs","planeLength","sin","floorColor","isDark","round","lightenAmount","canvasRayTracer","useStyles","makeStyles","theme","root","renderedImageContainer","marginLeft","marginRight","siteSetting","design","topBannerShown","classes","canvasRef","useRef","useState","setX","setY","setZ","setRx","setRz","useEffect","rayTracer","current","execute","className","style","zoom","ref","Button","onClick","flexGrow","backgroundColor","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ebbf3114.chunk.js","sourcesContent":["\nexport default class CanvasDrawer {\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D|null;\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.context = canvas?.getContext(\"2d\");\n  }\n\n  dimension() {\n    return {width: this.canvas.width, height: this.canvas.height};\n  }\n  fill(x=0, y=0, width:number|null=null, height:number|null=null, color:string|null=null) {\n    if (!this.context) return;\n    const prevColor = this.context.fillStyle;\n    if (color) this.context.fillStyle = color;\n    this.context.fillRect(x, y, width == null ? this.canvas.width : width, height == null ? this.canvas.height : height);\n    this.context.fillStyle = prevColor;\n  }\n\n  at(x: number, y: number, color: string) {\n    this.fill(x, y, 1, 1, color);\n  }\n\n}","import { TableContainer } from \"@material-ui/core\";\n\ninterface Drawer {\n  fill: (x:number, y:number, width:number|null, height:number|null, color:string|null) => void,\n  at: (x:number, y:number, color:string) => void\n  dimension: () => {width: number, height: number}\n}\n\ninterface RenderColors {\n  white: string;\n  black: string;\n  sky: string;\n  highlight: string;\n}\n\ninterface Point3D {\n  x: number; // sideward\n  y: number; // forward\n  z: number; // upward\n}\n\ninterface Rotation3D {\n  rx: number; // rotation on x axis\n  ry: number; // rotation on y axis\n  rz: number; // rotation on z axis\n}\n\nconst defaultColors: RenderColors = {\n  white: '#ffffff',\n  black: '#000000',\n  sky: '#2196f3',\n  highlight: '#b71c1c'\n}\n\nclass RayTracer {\n  drawer?: Drawer;\n  colors = defaultColors;\n  camera = {\n    x: 0,\n    y: 0,\n    z: 200,\n    rx: 0,\n    ry: 0,\n    rz: 0,\n    fov: Math.PI / 2, // 90 degree FOV\n  }\n  tileWidth = 30;\n  floorWidth = 1000;\n  maxRenderDistance = 10000;\n\n  constructor(drawer: Drawer|null) {\n    if (drawer) this.drawer = drawer;\n  }\n  \n  execute() {\n      const draw = this.drawer;\n      if (!draw) return;\n\n      const renderDimension = draw.dimension();\n      const cameraFOV = this.camera.fov;\n      const cameraOriginPos = {\n        x: this.camera.x,\n        y: this.camera.y,\n        z: this.camera.z,\n      };\n      \n      Array.from(Array(renderDimension.height).keys()).forEach((ypos) => {\n        window.setTimeout(() => {\n          Array.from(Array(renderDimension.width).keys()).forEach((xpos) => {\n            let rz = -cameraFOV/2 + (xpos * (cameraFOV / renderDimension.width));\n            let rx = cameraFOV/2 - (ypos * (cameraFOV / renderDimension.height));\n            \n            draw.at(xpos, ypos, this.rayPixel(cameraOriginPos, {\n              rx: this.camera.rx + rx,\n              ry: this.camera.ry + 0,\n              rz: this.camera.rz + rz,\n            }));\n          });\n        }, 0);\n      })\n\n  }\n\n  lightenColor(color: string, amount: number) {\n    let usePound = false;\n    if (color[0] == \"#\") {\n        color = color.slice(1);\n        usePound = true;\n    }\n \n    const colorNum = parseInt(color, 16);\n \n    let r = (colorNum >> 16) + amount;\n \n    if (r > 255) r = 255;\n    else if  (r < 0) r = 0;\n \n    let b = ((colorNum >> 8) & 0x00FF) + amount;\n \n    if (b > 255) b = 255;\n    else if  (b < 0) b = 0;\n \n    let g = (colorNum & 0x0000FF) + amount;\n \n    if (g > 255) g = 255;\n    else if (g < 0) g = 0;\n \n    return (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n  }\n\n  rayPixel(origin: Point3D, direction: Rotation3D) : string {\n    const [hitPoint, rayDistance, color] = this.shoot(origin, direction);\n    \n    return color;\n  }\n\n  shoot(origin: Point3D, direction: Rotation3D): [Point3D, number, string] {\n\n    // if an object is in the path of the ray, bounch it.\n    for (let i = 0; i < this.pillars.length; i++) {\n      const pillar = this.pillars[i];\n      \n      // calculate pillar rz from camera\n      const pillarNormalizedPosition = {\n        x: pillar.position.x - origin.x,\n        y: pillar.position.y - origin.y,\n        z: pillar.position.z - origin.z,\n      };\n      const pillarRz = Math.atan(pillarNormalizedPosition.x / pillarNormalizedPosition.y)\n      const pillarRzMin = Math.atan((pillarNormalizedPosition.x - pillar.width) / pillarNormalizedPosition.y)\n      const pillarRzMax = Math.atan((pillarNormalizedPosition.x + pillar.width) / pillarNormalizedPosition.y)\n      \n      const pillarRxMin = Math.atan(pillarNormalizedPosition.z / pillarNormalizedPosition.y);\n      const pillarRxMax = Math.atan(((pillar.position.z + pillar.height) - origin.z) / pillarNormalizedPosition.y);\n\n      if ((direction.rz > pillarRzMin) && (direction.rz < pillarRzMax) && (direction.rx > pillarRxMin) && (direction.rx < pillarRxMax)) {\n        // bounce the ray\n        const pillarPlaneLength = (pillar.position.y - origin.y) / Math.cos(direction.rz);\n        const newOrigin = {\n          x: (Math.tan(direction.rz) * (pillar.position.y - origin.y)) + origin.x,\n          y: pillar.position.y,\n          z: (Math.tan(direction.rx) * pillarPlaneLength) + origin.z,\n        };\n\n        // calculate new angles\n        const newDirection = {\n          rx: direction.rx - .05, // add small slope to the mirror\n          ry: 0,\n          rz: (Math.PI - direction.rz),\n        };\n\n        const [hitPoint, rayDistance, color] = this.shoot(newOrigin, newDirection);\n        return [hitPoint, rayDistance, this.lightenColor(color, 100)];\n      }\n    }\n\n    // render sky\n    if ((direction.rx > 0) && (direction.rx < Math.PI)) return [{\n      x: 0,\n      y: Infinity,\n      z: Infinity\n    }, Infinity, this.colors.sky];\n\n    // render floor\n    const rayDistance = origin.z / Math.cos((Math.PI/2)-direction.rx);\n    const rayDistanceAbs = isNaN(rayDistance) ? Infinity : Math.abs(rayDistance);\n    const planeLength = origin.z / Math.tan(-direction.rx);\n    const y = origin.y + (Math.cos(direction.rz) * planeLength);\n    const x = origin.x + (Math.sin(direction.rz) * planeLength);\n    \n    let hitPoint = {\n      // x: isNaN(x) ? Infinity : (Math.abs(x) > this.floorWidth ? Infinity : x),\n      // y: isNaN(y) ? Infinity : (Math.abs(y) > this.floorWidth ? Infinity : y),\n      x: isNaN(x) ? Infinity : x,\n      y: isNaN(y) ? Infinity : y,\n      z: 0\n    };\n\n    let floorColor = this.colors.black;\n    let isDark = false;\n    if ((Math.abs(Math.round(hitPoint.x % (this.tileWidth*2))) < this.tileWidth) && (Math.abs(Math.round(hitPoint.y % (this.tileWidth*2))) < this.tileWidth)) {\n      isDark = true;\n    }\n    if ((Math.abs(Math.round(hitPoint.x % (this.tileWidth*2))) >= this.tileWidth) && (Math.abs(Math.round(hitPoint.y % (this.tileWidth*2))) >= this.tileWidth)) {\n      isDark = true;\n    }\n    if (hitPoint.x < 0) isDark = !isDark;\n\n    if (isDark) {\n      const lightenAmount = ((rayDistanceAbs > this.maxRenderDistance ? this.maxRenderDistance : rayDistanceAbs) / this.maxRenderDistance) * 200;\n      floorColor = this.lightenColor(this.colors.black, lightenAmount);\n    }\n    else {\n      floorColor = this.colors.white;\n    }\n    \n    if ((hitPoint.x == Infinity) || (hitPoint.y == Infinity) || (hitPoint.z == Infinity)) {\n      floorColor = this.colors.sky;\n    }\n\n    return [\n      hitPoint,\n      rayDistanceAbs,\n      floorColor\n    ];\n  }\n\n  pillars = [\n    {\n      position: {\n        x: 80,\n        y: 345,\n        z: 0,\n      },\n      width: this.tileWidth/2,\n      height: 120,\n    }\n  ];\n\n  spheres = [\n    {\n      position: {\n        x: 0,\n        y: 100,\n        z: 30,\n      },\n      radius: 30\n    }\n  ];\n\n}\n\nexport {\n  RayTracer,\n  defaultColors,\n}","\nimport {\n  colors\n} from '@material-ui/core';\n\nimport CanvasDrawer from './CanvasDrawer';\nimport {\n  RayTracer,\n  defaultColors,\n} from './RayTracer';\n\nfunction canvasRayTracer(canvas: HTMLCanvasElement|null) {\n  if (!canvas) return null;\n\n  const draw = new CanvasDrawer(canvas);\n\n  const rayTracer = new RayTracer(draw);\n  return rayTracer;\n}\n\nexport default canvasRayTracer;","import React, {\n  useState,\n  useEffect,\n  useRef\n} from 'react';\n\nimport {\n  makeStyles,\n  Button\n} from '@material-ui/core';\n\nimport {\n  canvasRayTracer\n} from '../renderer';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'relative',\n  },\n  renderedImageContainer: {\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  },\n}));\n\nfunction RayTracer({siteSetting, design, topBannerShown}: any) {\n  const classes = useStyles();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(500);\n  const [height, setHeight] = useState(500);\n\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const [z, setZ] = useState(100);\n  const [rx, setRx] = useState(0);\n  const [rz, setRz] = useState(0);\n\n  useEffect(() => {\n    const rayTracer = canvasRayTracer(canvasRef.current);\n    if (!rayTracer) return;\n    rayTracer.camera = {\n      x: x,\n      y: y,\n      z: z,\n      rx: rx,\n      ry: 0,\n      rz: rz,\n      fov: Math.PI / 4, // 45 degree FOV\n    }\n    rayTracer.execute();\n  })\n  return (<div className={classes.root}>\n    <div className={classes.renderedImageContainer} style={{width, zoom: 500 / width}}>\n      <canvas width={width} height={height} ref={canvasRef} />\n    </div>\n    <div className={classes.renderedImageContainer} style={{width : 500}}>\n      <div>\n        <Button onClick={() => setX(x - 10)}>Left</Button>\n        <Button onClick={() => setY(y + 10)}>Front</Button>\n        <Button onClick={() => setY(y - 10)}>Back</Button>\n        <Button onClick={() => setX(x + 10)}>Right</Button>\n      </div>\n      <div>\n        <Button onClick={() => setRz(rz - .1)}>Rt Left</Button>\n        <Button onClick={() => setRz(rz + .1)}>Rt Right</Button>\n        <Button onClick={() => setRx(rx + .1)}>Rt Up</Button>\n        <Button onClick={() => setRx(rx - .1)}>Rt Down</Button>\n        <Button onClick={() => setZ(z + 10)}>Top</Button>\n        <Button onClick={() => setZ(z - 10)}>Bottom</Button>\n      </div>\n    </div>\n  </div>);\n}\n\nexport default RayTracer;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport RayTracer from './components/RayTracer';\n\nimport './App.css';\n\nimport 'typeface-roboto';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: \"#ffffff\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <RayTracer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}