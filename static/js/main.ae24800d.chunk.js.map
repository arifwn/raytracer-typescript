{"version":3,"sources":["renderer/CanvasDrawer.ts","renderer/RayTracer.ts","renderer/canvasRayTracer.ts","components/RayTracer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CanvasDrawer","canvas","context","this","getContext","width","height","x","y","color","prevColor","fillStyle","fillRect","fill","defaultColors","white","black","sky","highlight","RayTracer","drawer","colors","camera","z","rx","ry","rz","fov","Math","PI","tileWidth","floorWidth","maxRenderDistance","draw","renderDimension","dimension","cameraFOV","cameraOriginPos","ypos","xpos","at","rayPixel","amount","usePound","slice","colorNum","parseInt","r","b","g","toString","origin","direction","shoot","hitPoint","rayDistance","abs","Infinity","isDark","round","lightenAmount","lightenColor","cos","planeLength","tan","sin","isNaN","canvasRayTracer","useStyles","makeStyles","theme","root","position","renderedImageContainer","marginLeft","marginRight","siteSetting","design","topBannerShown","classes","canvasRef","useRef","useState","setX","setY","setZ","setRx","setRz","useEffect","rayTracer","current","execute","className","style","zoom","ref","Button","onClick","flexGrow","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae24800d.chunk.js","sourcesContent":["\nexport default class CanvasDrawer {\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D|null;\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.context = canvas?.getContext(\"2d\");\n  }\n\n  dimension() {\n    return {width: this.canvas.width, height: this.canvas.height};\n  }\n  fill(x=0, y=0, width:number|null=null, height:number|null=null, color:string|null=null) {\n    if (!this.context) return;\n    const prevColor = this.context.fillStyle;\n    if (color) this.context.fillStyle = color;\n    this.context.fillRect(x, y, width == null ? this.canvas.width : width, height == null ? this.canvas.height : height);\n    this.context.fillStyle = prevColor;\n  }\n\n  at(x: number, y: number, color: string) {\n    this.fill(x, y, 1, 1, color);\n  }\n\n}","import { TableContainer } from \"@material-ui/core\";\n\ninterface Drawer {\n  fill: (x:number, y:number, width:number|null, height:number|null, color:string|null) => void,\n  at: (x:number, y:number, color:string) => void\n  dimension: () => {width: number, height: number}\n}\n\ninterface RenderColors {\n  white: string;\n  black: string;\n  sky: string;\n  highlight: string;\n}\n\ninterface Point3D {\n  x: number; // sideward\n  y: number; // forward\n  z: number; // upward\n}\n\ninterface Rotation3D {\n  rx: number; // rotation on x axis\n  ry: number; // rotation on y axis\n  rz: number; // rotation on z axis\n}\n\nconst defaultColors: RenderColors = {\n  white: '#ffffff',\n  black: '#000000',\n  sky: '#2196f3',\n  highlight: '#b71c1c'\n}\n\nclass RayTracer {\n  drawer?: Drawer;\n  colors = defaultColors;\n  camera = {\n    x: 0,\n    y: 0,\n    z: 200,\n    rx: 0,\n    ry: 0,\n    rz: 0,\n    fov: Math.PI / 2, // 90 degree FOV\n  }\n  tileWidth = 30;\n  floorWidth = 1000;\n  maxRenderDistance = 10000;\n\n  constructor(drawer: Drawer|null) {\n    if (drawer) this.drawer = drawer;\n  }\n  \n  execute() {\n      const draw = this.drawer;\n      if (!draw) return;\n\n      const renderDimension = draw.dimension();\n      const cameraFOV = this.camera.fov;\n      const cameraOriginPos = {\n        x: this.camera.x,\n        y: this.camera.y,\n        z: this.camera.z,\n      };\n\n      for (let ypos = 0; ypos < renderDimension.height; ypos++) {\n        for (let xpos = 0; xpos < renderDimension.width; xpos++) {\n          let rz = -cameraFOV/2 + (xpos * (cameraFOV / renderDimension.width));\n          let rx = cameraFOV/2 - (ypos * (cameraFOV / renderDimension.height));\n          // console.log('cam', xpos, ypos, rz, rx);\n          draw.at(xpos, ypos, this.rayPixel(cameraOriginPos, {\n            rx: this.camera.rx + rx,\n            ry: this.camera.ry + 0,\n            rz: this.camera.rz + rz,\n          }));\n        }\n      }\n  }\n\n  lightenColor(color: string, amount: number) {\n    let usePound = false;\n    if (color[0] == \"#\") {\n        color = color.slice(1);\n        usePound = true;\n    }\n \n    const colorNum = parseInt(color, 16);\n \n    let r = (colorNum >> 16) + amount;\n \n    if (r > 255) r = 255;\n    else if  (r < 0) r = 0;\n \n    let b = ((colorNum >> 8) & 0x00FF) + amount;\n \n    if (b > 255) b = 255;\n    else if  (b < 0) b = 0;\n \n    let g = (colorNum & 0x0000FF) + amount;\n \n    if (g > 255) g = 255;\n    else if (g < 0) g = 0;\n \n    return (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n  }\n\n  rayPixel(origin: Point3D, direction: Rotation3D) : string {\n    const [hitPoint, rayDistance] = this.shoot(origin, direction);\n    if (Math.abs(hitPoint.x) == Infinity) return this.colors.sky;\n    if (Math.abs(hitPoint.y) == Infinity) return this.colors.sky;\n    if (Math.abs(hitPoint.z) == Infinity) return this.colors.sky;\n    if (hitPoint.z == 0) {\n      let isDark = false;\n      if ((Math.abs(Math.round(hitPoint.x % (this.tileWidth*2))) < this.tileWidth) && (Math.abs(Math.round(hitPoint.y % (this.tileWidth*2))) < this.tileWidth)) {\n        isDark = true;\n      }\n      if ((Math.abs(Math.round(hitPoint.x % (this.tileWidth*2))) >= this.tileWidth) && (Math.abs(Math.round(hitPoint.y % (this.tileWidth*2))) >= this.tileWidth)) {\n        isDark = true;\n      }\n      if (hitPoint.x < 0) isDark = !isDark;\n\n      if (isDark) {\n        // return this.colors.black;\n        const lightenAmount = ((rayDistance > this.maxRenderDistance ? this.maxRenderDistance : rayDistance) / this.maxRenderDistance) * 200;\n        return this.lightenColor(this.colors.black, lightenAmount);\n      }\n      return this.colors.white;\n    }\n    return this.colors.white;\n  }\n\n  shoot(origin: Point3D, direction: Rotation3D): [Point3D, number] {\n\n    // if an object is in the path of the ray, bounch it.\n\n    // render sky\n    if ((direction.rx > 0) && (direction.rx < Math.PI)) return [{\n      x: 0,\n      y: Infinity,\n      z: Infinity\n    }, Infinity];\n\n    // render floor\n    const rayDistance = origin.z / Math.cos((Math.PI/2)-direction.rx);\n    const planeLength = origin.z / Math.tan(-direction.rx);\n    const y = origin.y + (Math.cos(direction.rz) * planeLength);\n    const x = origin.x + (Math.sin(direction.rz) * planeLength);\n    return [{\n      // x: isNaN(x) ? Infinity : (Math.abs(x) > this.floorWidth ? Infinity : x),\n      // y: isNaN(y) ? Infinity : (Math.abs(y) > this.floorWidth ? Infinity : y),\n      x: isNaN(x) ? Infinity : x,\n      y: isNaN(y) ? Infinity : y,\n      z: 0\n    }, isNaN(rayDistance) ? Infinity : Math.abs(rayDistance)];\n  }\n\n}\n\nexport {\n  RayTracer,\n  defaultColors,\n}","\nimport {\n  colors\n} from '@material-ui/core';\n\nimport CanvasDrawer from './CanvasDrawer';\nimport {\n  RayTracer,\n  defaultColors,\n} from './RayTracer';\n\nfunction canvasRayTracer(canvas: HTMLCanvasElement|null) {\n  if (!canvas) return null;\n\n  const draw = new CanvasDrawer(canvas);\n\n  const rayTracer = new RayTracer(draw);\n  return rayTracer;\n}\n\nexport default canvasRayTracer;","import React, {\n  useState,\n  useEffect,\n  useRef\n} from 'react';\n\nimport {\n  makeStyles,\n  Button\n} from '@material-ui/core';\n\nimport {\n  canvasRayTracer\n} from '../renderer';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'relative',\n  },\n  renderedImageContainer: {\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  },\n}));\n\nfunction RayTracer({siteSetting, design, topBannerShown}: any) {\n  const classes = useStyles();\n  const canvasRef = useRef(null);\n  const [width, setWidth] = useState(500);\n  const [height, setHeight] = useState(500);\n\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const [z, setZ] = useState(100);\n  const [rx, setRx] = useState(0);\n  const [rz, setRz] = useState(0);\n\n  useEffect(() => {\n    const rayTracer = canvasRayTracer(canvasRef.current);\n    if (!rayTracer) return;\n    rayTracer.camera = {\n      x: x,\n      y: y,\n      z: z,\n      rx: rx,\n      ry: 0,\n      rz: rz,\n      fov: Math.PI / 4, // 45 degree FOV\n    }\n    rayTracer.execute();\n  })\n  return (<div className={classes.root}>\n    <div className={classes.renderedImageContainer} style={{width, zoom: 500 / width}}>\n      <canvas width={width} height={height} ref={canvasRef} />\n    </div>\n    <div className={classes.renderedImageContainer} style={{width : 500}}>\n      <div>\n        <Button onClick={() => setX(x - 10)}>Left</Button>\n        <Button onClick={() => setY(y + 10)}>Front</Button>\n        <Button onClick={() => setY(y - 10)}>Back</Button>\n        <Button onClick={() => setX(x + 10)}>Right</Button>\n      </div>\n      <div>\n        <Button onClick={() => setRz(rz - .1)}>Rt Left</Button>\n        <Button onClick={() => setRz(rz + .1)}>Rt Right</Button>\n        <Button onClick={() => setRx(rx + .1)}>Rt Up</Button>\n        <Button onClick={() => setRx(rx - .1)}>Rt Down</Button>\n        <Button onClick={() => setZ(z + 10)}>Top</Button>\n        <Button onClick={() => setZ(z - 10)}>Bottom</Button>\n      </div>\n    </div>\n  </div>);\n}\n\nexport default RayTracer;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport RayTracer from './components/RayTracer';\n\nimport './App.css';\n\nimport 'typeface-roboto';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: \"#ffffff\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <RayTracer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}